
UART_GUI_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000000f4  00000168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000174  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000058  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000295  00000000  00000000  000001fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001fd  00000000  00000000  00000491  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000255  00000000  00000000  0000068e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000088  00000000  00000000  000008e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001e5  00000000  00000000  0000096c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000000d7  00000000  00000000  00000b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000038  00000000  00000000  00000c28  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ef       	ldi	r30, 0xF4	; 244
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 78 00 	jmp	0xf0	; 0xf0 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:
#include <avr/io.h>
#include "USART.h"
#include <avr/delay.h>
int main(void)
{
	USART_vInitSpecific();
  82:	0e 94 51 00 	call	0xa2	; 0xa2 <USART_vInitSpecific>
    while(1)
    {
        USART_vSendString("ALY MOHAMED");
  86:	80 e6       	ldi	r24, 0x60	; 96
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	0e 94 60 00 	call	0xc0	; 0xc0 <USART_vSendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  8e:	2f e3       	ldi	r18, 0x3F	; 63
  90:	8d e0       	ldi	r24, 0x0D	; 13
  92:	93 e0       	ldi	r25, 0x03	; 3
  94:	21 50       	subi	r18, 0x01	; 1
  96:	80 40       	sbci	r24, 0x00	; 0
  98:	90 40       	sbci	r25, 0x00	; 0
  9a:	e1 f7       	brne	.-8      	; 0x94 <main+0x12>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <main+0x1c>
  9e:	00 00       	nop
  a0:	f2 cf       	rjmp	.-28     	; 0x86 <main+0x4>

000000a2 <USART_vInitSpecific>:
#include "USART.h"
//Initialization for specific
void USART_vInitSpecific()
{
	//UCSRA|=(1<<TXC);
	UCSRB=(1<<RXEN)|(1<<TXEN);       //enable the transmitter and reciever
  a2:	88 e1       	ldi	r24, 0x18	; 24
  a4:	8a b9       	out	0x0a, r24	; 10
	UCSRC |=(1<<UCSZ0)|(1<<UCSZ1);  //choose 8 bit mode
  a6:	80 b5       	in	r24, 0x20	; 32
  a8:	86 60       	ori	r24, 0x06	; 6
  aa:	80 bd       	out	0x20, r24	; 32
	UBRRL=51;          //to choose baud rate
  ac:	83 e3       	ldi	r24, 0x33	; 51
  ae:	89 b9       	out	0x09, r24	; 9
	UBRRH=0;
  b0:	10 bc       	out	0x20, r1	; 32
  b2:	08 95       	ret

000000b4 <USART_vSendByte>:
	}
}
*/
void USART_vSendByte(INT8U u8Data)
{	
	if(u8Data!=0x00)         //عشان ابعت اللى بيتداس على ال كيبورد 
  b4:	88 23       	and	r24, r24
  b6:	19 f0       	breq	.+6      	; 0xbe <USART_vSendByte+0xa>
	{
	while((UCSRA&(1<<UDRE))==0);
  b8:	5d 9b       	sbis	0x0b, 5	; 11
  ba:	fe cf       	rjmp	.-4      	; 0xb8 <USART_vSendByte+0x4>
	UDR=u8Data;
  bc:	8c b9       	out	0x0c, r24	; 12
  be:	08 95       	ret

000000c0 <USART_vSendString>:
	while((UCSRA&(1<<RXC))==0);
	return UDR;
}

void USART_vSendString(INT8U *StringDisplay)
{
  c0:	1f 93       	push	r17
  c2:	cf 93       	push	r28
  c4:	df 93       	push	r29
  c6:	ec 01       	movw	r28, r24
	INT8U i;
	for(i=0;StringDisplay!=0;i++)
  c8:	00 97       	sbiw	r24, 0x00	; 0
  ca:	49 f4       	brne	.+18     	; 0xde <USART_vSendString+0x1e>
  cc:	0d c0       	rjmp	.+26     	; 0xe8 <USART_vSendString+0x28>
	{
		USART_vSendByte(StringDisplay[i]);
  ce:	fe 01       	movw	r30, r28
  d0:	e1 0f       	add	r30, r17
  d2:	f1 1d       	adc	r31, r1
  d4:	80 81       	ld	r24, Z
  d6:	0e 94 5a 00 	call	0xb4	; 0xb4 <USART_vSendByte>
}

void USART_vSendString(INT8U *StringDisplay)
{
	INT8U i;
	for(i=0;StringDisplay!=0;i++)
  da:	1f 5f       	subi	r17, 0xFF	; 255
  dc:	f8 cf       	rjmp	.-16     	; 0xce <USART_vSendString+0xe>
	{
		USART_vSendByte(StringDisplay[i]);
  de:	88 81       	ld	r24, Y
  e0:	0e 94 5a 00 	call	0xb4	; 0xb4 <USART_vSendByte>
}

void USART_vSendString(INT8U *StringDisplay)
{
	INT8U i;
	for(i=0;StringDisplay!=0;i++)
  e4:	11 e0       	ldi	r17, 0x01	; 1
  e6:	f3 cf       	rjmp	.-26     	; 0xce <USART_vSendString+0xe>
	{
		USART_vSendByte(StringDisplay[i]);
	}
}
  e8:	df 91       	pop	r29
  ea:	cf 91       	pop	r28
  ec:	1f 91       	pop	r17
  ee:	08 95       	ret

000000f0 <_exit>:
  f0:	f8 94       	cli

000000f2 <__stop_program>:
  f2:	ff cf       	rjmp	.-2      	; 0xf2 <__stop_program>
